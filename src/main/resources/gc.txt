# types of GCs
# - serial (single threaded and slowest of all, can stop the application unexpectedly '-XX:+UseSerialGC')

# - parallel (default gc for jvm. has multithreading but freezes application threads when collecting a garbage. if we
#   use this GC, we can specify maximum garbage collection threads and pause time, throughput, and footprint (heap size)
#   jvm param for enabling parallel gc => '-XX:+UseParallelGC'
#   jvm param for threads count => '-XX:ParallelGCThreads=<N>'
#   jvm param for max pause time between two gc in ms => '-XX:MaxGCPauseMillis=<N>'
#   jvm param for rate gc time vs out of gc time => '-XX:GCTimeRatio=<N>'
#   foe example, 19 sets a goal of 5% of the total time for GC and throughput goal of 95%
#   jvm param for heap size => '-Xmx<N>')

# - cms (uses multiple gc threads. app respond slower in average, but also have smaller gc pauses. deprecated since v.9
#   If more than 98% of the total time is spent in CMS garbage collection, and less than 2% of the heap is recovered,
#   then an OutOfMemoryError is thrown by the CMS collector. If necessary, we can disable this feature by adding
#   the option -XX:-UseGCOverheadLimit to the command line.
#   jvm param for enabling gc => '-XX:+UseConcMarkSweepGC')

# - g1 (split heap into few equal spaces, first marking state, then sweep state
#   jvm param for enabling gc => '-XX:+UseG1GC')

# - z (performs more expensive work concurrently without stopping the execution of application threads for more
#   than 10 ms. -XX:+UnlockExperimentalVMOptions -XX:+UseZGC)

# - epsilon (experimental since java 11. to enable: -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC. this gc doesn't
#   reclaim memory from garbage objects. we can use it for benchmarking an application, for example)

# jvm params for tuning the gc
# - '-Xms<heap size>[unit]' and '-Xmx<heap size>[unit]' - minimum and maximum heap size. example: -Xms2G -Xmx5G
# - '-XX:NewSize=<young size>[unit]' and '-XX:MaxNewSize=<young size>[unit]' - min and max young generation size

# other jvm params
# -XX:+HeapDumpOnOutOfMemoryError - activate dump writing on out of memory
# -XX:HeapDumpPath=./java_pid<pid>.hprof - filepath to dump
# -XX:OnOutOfMemoryError="< cmd args >;< cmd args >" command to run on out of memory error
# -XX:+UseGCOverheadLimit - time before throw an out of memory error

# gc logging
# java 8 and earlier:
# - -XX:+PrintGC - enable logging just events of gc
# - -XX:+PrintGCDetails - logs additional info about gc events
# - -XX:+PrintGCDateStamps - add date of gc at line start
# - -XX:+PrintGCTimeStamps - add timestamp from jvm start in ms at gc line start
# - -Xloggc or -Xloggc:file - redirects gc logs to a file
# java 9 and later
# - -XX:PrintGC is deprecated
# - -Xlog - unified param (variants can be much more, such as '::time' or others)
#   -Xlog:logging=debug - specify log level
#   -Xlog:gc*=debug:file=/tmp/gc.log - specify gc debug messages to a file
#   -Xlog:gc*=debug:stdout -Xlog:gc*=debug:file=/tmp/gc.log - this param is repeatable and we can specify few outputs
# - log details commands: -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=50M -Xloggc:/home/gc.log

# gc log analyser - https://gceasy.io/